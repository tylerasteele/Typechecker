-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParCPP
  ( happyError
  , myLexer
  , pProgram
  , pDef
  , pListDef
  , pArg
  , pListArg
  , pStm
  , pListStm
  , pExp15
  , pExp14
  , pExp13
  , pExp12
  , pExp11
  , pExp9
  , pExp8
  , pExp4
  , pExp3
  , pExp2
  , pExp
  , pExp1
  , pExp5
  , pExp6
  , pExp7
  , pExp10
  , pListExp
  , pType
  , pListId
  ) where

import Prelude

import qualified AbsCPP
import LexCPP

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp10 Exp10
%name pListExp ListExp
%name pType Type
%name pListId ListId
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='     { PT _ (TS _ 1)  }
  '&&'     { PT _ (TS _ 2)  }
  '('      { PT _ (TS _ 3)  }
  ')'      { PT _ (TS _ 4)  }
  '*'      { PT _ (TS _ 5)  }
  '+'      { PT _ (TS _ 6)  }
  '++'     { PT _ (TS _ 7)  }
  ','      { PT _ (TS _ 8)  }
  '-'      { PT _ (TS _ 9)  }
  '--'     { PT _ (TS _ 10) }
  '/'      { PT _ (TS _ 11) }
  ';'      { PT _ (TS _ 12) }
  '<'      { PT _ (TS _ 13) }
  '<='     { PT _ (TS _ 14) }
  '='      { PT _ (TS _ 15) }
  '=='     { PT _ (TS _ 16) }
  '>'      { PT _ (TS _ 17) }
  '>='     { PT _ (TS _ 18) }
  'bool'   { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else'   { PT _ (TS _ 21) }
  'false'  { PT _ (TS _ 22) }
  'if'     { PT _ (TS _ 23) }
  'int'    { PT _ (TS _ 24) }
  'return' { PT _ (TS _ 25) }
  'string' { PT _ (TS _ 26) }
  'true'   { PT _ (TS _ 27) }
  'void'   { PT _ (TS _ 28) }
  'while'  { PT _ (TS _ 29) }
  '{'      { PT _ (TS _ 30) }
  '||'     { PT _ (TS _ 31) }
  '}'      { PT _ (TS _ 32) }
  L_doubl  { PT _ (TD $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }
  L_Id     { PT _ (T_Id $$) }

%%

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Id :: { AbsCPP.Id }
Id  : L_Id { AbsCPP.Id $1 }

Program :: { AbsCPP.Program }
Program : ListDef { AbsCPP.PDefs $1 }

Def :: { AbsCPP.Def }
Def
  : Type Id '(' ListArg ')' '{' ListStm '}' { AbsCPP.DFun $1 $2 $4 $7 }

ListDef :: { [AbsCPP.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Arg :: { AbsCPP.Arg }
Arg : Type Id { AbsCPP.ADecl $1 $2 }

ListArg :: { [AbsCPP.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Stm :: { AbsCPP.Stm }
Stm
  : Exp ';' { AbsCPP.SExp $1 }
  | Type ListId ';' { AbsCPP.SDecls $1 $2 }
  | Type Id '=' Exp ';' { AbsCPP.SInit $1 $2 $4 }
  | 'return' Exp ';' { AbsCPP.SReturn $2 }
  | 'return' ';' { AbsCPP.SReturnVoid }
  | 'while' '(' Exp ')' Stm { AbsCPP.SWhile $3 $5 }
  | '{' ListStm '}' { AbsCPP.SBlock $2 }
  | 'if' '(' Exp ')' Stm 'else' Stm { AbsCPP.SIfElse $3 $5 $7 }

ListStm :: { [AbsCPP.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp15 :: { AbsCPP.Exp }
Exp15
  : 'true' { AbsCPP.ETrue }
  | 'false' { AbsCPP.EFalse }
  | Integer { AbsCPP.EInt $1 }
  | Double { AbsCPP.EDouble $1 }
  | String { AbsCPP.EString $1 }
  | Id { AbsCPP.EId $1 }
  | Id '(' ListExp ')' { AbsCPP.EApp $1 $3 }
  | '(' Exp ')' { $2 }

Exp14 :: { AbsCPP.Exp }
Exp14
  : Exp15 '++' { AbsCPP.EPIncr $1 }
  | Exp15 '--' { AbsCPP.EPDecr $1 }
  | Exp15 { $1 }

Exp13 :: { AbsCPP.Exp }
Exp13
  : '++' Exp14 { AbsCPP.EIncr $2 }
  | '--' Exp14 { AbsCPP.EDecr $2 }
  | Exp14 { $1 }

Exp12 :: { AbsCPP.Exp }
Exp12
  : Exp12 '*' Exp13 { AbsCPP.ETimes $1 $3 }
  | Exp12 '/' Exp13 { AbsCPP.EDiv $1 $3 }
  | Exp13 { $1 }

Exp11 :: { AbsCPP.Exp }
Exp11
  : Exp11 '+' Exp12 { AbsCPP.EPlus $1 $3 }
  | Exp11 '-' Exp12 { AbsCPP.EMinus $1 $3 }
  | Exp12 { $1 }

Exp9 :: { AbsCPP.Exp }
Exp9
  : Exp9 '<' Exp10 { AbsCPP.ELt $1 $3 }
  | Exp9 '>' Exp10 { AbsCPP.EGt $1 $3 }
  | Exp9 '<=' Exp10 { AbsCPP.ELtEq $1 $3 }
  | Exp9 '>=' Exp10 { AbsCPP.EGtEq $1 $3 }
  | Exp10 { $1 }

Exp8 :: { AbsCPP.Exp }
Exp8
  : Exp8 '==' Exp9 { AbsCPP.EEq $1 $3 }
  | Exp8 '!=' Exp9 { AbsCPP.ENEq $1 $3 }
  | Exp9 { $1 }

Exp4 :: { AbsCPP.Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCPP.EAnd $1 $3 } | Exp5 { $1 }

Exp3 :: { AbsCPP.Exp }
Exp3 : Exp3 '||' Exp4 { AbsCPP.EOr $1 $3 } | Exp4 { $1 }

Exp2 :: { AbsCPP.Exp }
Exp2 : Exp3 '=' Exp2 { AbsCPP.EAss $1 $3 } | Exp3 { $1 }

Exp :: { AbsCPP.Exp }
Exp : Exp1 { $1 }

Exp1 :: { AbsCPP.Exp }
Exp1 : Exp2 { $1 }

Exp5 :: { AbsCPP.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsCPP.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsCPP.Exp }
Exp7 : Exp8 { $1 }

Exp10 :: { AbsCPP.Exp }
Exp10 : Exp11 { $1 }

ListExp :: { [AbsCPP.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

Type :: { AbsCPP.Type }
Type
  : 'bool' { AbsCPP.Type_bool }
  | 'int' { AbsCPP.Type_int }
  | 'double' { AbsCPP.Type_double }
  | 'void' { AbsCPP.Type_void }
  | 'string' { AbsCPP.Type_string }

ListId :: { [AbsCPP.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

